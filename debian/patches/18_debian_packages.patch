Index: system-config-printer-1.0.0/cupshelpers.py
===================================================================
--- system-config-printer-1.0.0.orig/cupshelpers.py	2008-06-22 16:43:06.398824013 +0200
+++ system-config-printer-1.0.0/cupshelpers.py	2008-06-22 16:48:36.122819661 +0200
@@ -646,21 +646,21 @@ def missingPackagesAndExecutables(ppd):
             'foo2oak-wrapper': None,
             'pnm2ppa': 'pnm2ppa',
             'c2050': 'c2050',
-            'c2070': 'c2070',
+            'c2070': None,
             'cjet': 'cjet',
             'lm1100': 'lx',
             'esc-m': 'min12xxw',
             'min12xxw': 'min12xxw',
-            'pbm2l2030': 'pbm2l2030',
-            'pbm2l7k': 'pbm2l7k',
-            'pbm2lex': 'pbm2l7k',
+            'pbm2l2030': None,
+            'pbm2l7k': None,
+            'pbm2lex': None,
             # IJS servers (used by foomatic)
             'hpijs': 'hpijs',
-            'ijsgutenprint.5.0': 'gutenprint',
+            'ijsgutenprint.5.0': 'ijsgutenprint',
             # CUPS filters
-            'rastertogutenprint.5.0': 'gutenprint-cups',
-            'commandtoepson': 'gutenprint-cups',
-            'commandtocanon': 'gutenprint-cups',
+            'rastertogutenprint.5.0': 'cupsys-driver-gutenprint',
+            'commandtoepson': 'cupsys-driver-gutenprint',
+            'commandtocanon': 'cupsys-driver-gutenprint',
             }
         try:
             pkg = pkgs[exe]
Index: system-config-printer-1.0.0/applet.py
===================================================================
--- system-config-printer-1.0.0.orig/applet.py	2008-06-22 16:47:00.955328820 +0200
+++ system-config-printer-1.0.0/applet.py	2008-06-22 17:07:37.282827637 +0200
@@ -24,6 +24,7 @@ import statereason
 from statereason import StateReason
 from cupsutils.debug import *
 import pprint
+import debutils
 
 import dbus
 import dbus.glib
@@ -62,8 +63,6 @@ class NewPrinterNotification(dbus.servic
     STATUS_GENERIC_DRIVER = 2
     STATUS_NO_DRIVER = 3
 
-    INSTALL_PACKAGES_COMMAND="/usr/bin/system-install-packages"
-
     def __init__ (self, bus):
         self.bus = bus
         self.getting_ready = 0
@@ -143,7 +142,7 @@ class NewPrinterNotification(dbus.servic
             text = _("`%s' requires driver installation: %s.") % (name, pkgs)
             n = pynotify.Notification (title, text)
             n.set_urgency (pynotify.URGENCY_CRITICAL)
-            if os.access (self.INSTALL_PACKAGES_COMMAND, os.X_OK):
+            if debutils.can_install_packages():
                 n.add_action ("install-driver", _("Install"),
                               lambda x, y: self.install_driver (x, y,
                                                                 missing_pkgs))
@@ -167,18 +166,8 @@ class NewPrinterNotification(dbus.servic
         self.timeout_ready ()
 
     def run_config_tool (self, argv):
-        import os
-        pid = os.fork ()
-        if pid == 0:
-            # Child.
-            cmd = "/usr/bin/system-config-printer"
-            argv.insert (0, cmd)
-            os.execvp (cmd, argv)
-            sys.exit (1)
-        elif pid == -1:
-            print "Error forking process"
-        else:
-            gobject.timeout_add (60 * 1000, self.collect_exit_code, pid)
+        import debutils
+        debutils.run_config_tool (argv)
         
     def configure (self, notification, action, name):
         self.run_config_tool (["--configure-printer", name])
@@ -187,34 +176,9 @@ class NewPrinterNotification(dbus.servic
         self.run_config_tool (["--choose-driver", name])
 
     def install_driver (self, notification, action, missing_pkgs):
-        import os
-        pid = os.fork ()
-        if pid == 0:
-            # Child.
-            argv = [self.INSTALL_PACKAGES_COMMAND]
-            argv.extend (missing_pkgs)
-            os.execv (argv[0], argv)
-            sys.exit (1)
-        elif pid == -1:
-            print "Error forking process"
-        else:
-            gobject.timeout_add (60 * 1000, self.collect_exit_code, pid)
+        import debutils
+        debutils.install_packages (missing_pkgs)
 
-    def collect_exit_code (self, pid):
-        # We do this with timers instead of signals because we already
-        # have gobject imported, but don't (yet) import signal;
-        # let's try not to inflate the process size.
-        import os
-        try:
-            print "Waiting for child %d" % pid
-            (pid, status) = os.waitpid (pid, os.WNOHANG)
-            if pid == 0:
-                # Run this timer again.
-                return True
-        except OSError:
-            pass
-
-        return False
 
 PROGRAM_NAME="system-config-printer-applet"
 def show_help ():
Index: system-config-printer-1.0.0/debutils.py
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ system-config-printer-1.0.0/debutils.py	2008-06-22 16:48:36.126818772 +0200
@@ -0,0 +1,37 @@
+import tempfile, signal, os
+
+GKSU_PATH = "/usr/bin/gksu"
+SYNAPTIC_PATH = "/usr/sbin/synaptic"
+SYNAPTIC_DESKTOP = "/usr/share/applications/synaptic.desktop"
+SCP_PATH = "/usr/bin/system-config-printer"
+SCP_DESKTOP = "/usr/share/applications/system-config-printer.desktop"
+
+children_tmpfiles = {}
+
+def child_reap_cb (signum, stack):
+    (pid, status) = os.wait ()
+    if pid in children_tmpfiles:
+        os.remove (children_tmpfiles[pid])
+        del children_tmpfiles[pid]
+
+def can_install_packages ():
+    return os.access (SYNAPTIC_PATH, os.X_OK)
+
+def install_packages (pkglist):
+    (fd, tmpname) = tempfile.mkstemp(prefix="s-c-p_synaptic_")
+    f = os.fdopen (fd, "w")
+    for pkg in pkglist:
+        f.write('%s\tinstall\n'%pkg)
+    f.close()
+    signal.signal (signal.SIGCHLD, child_reap_cb)
+    pid = os.spawnl (os.P_NOWAIT, GKSU_PATH, "gksu", "--description",
+                     SYNAPTIC_DESKTOP, "--", SYNAPTIC_PATH,
+                     "--hide-main-window", "--non-interactive",
+                     "-o", "Synaptic::closeZvt=true",
+                     "--set-selections-file", tmpname)
+    children_tmpfiles[pid] = tmpname
+
+def run_config_tool (args):
+    signal.signal (signal.SIGCHLD, child_reap_cb)
+    os.spawnv (os.P_NOWAIT, GKSU_PATH, ["gksu", "--description",
+               SCP_DESKTOP, "--", SCP_PATH ] + args)
Index: system-config-printer-1.0.0/system-config-printer.py
===================================================================
--- system-config-printer-1.0.0.orig/system-config-printer.py	2008-06-22 16:46:05.859322625 +0200
+++ system-config-printer-1.0.0/system-config-printer.py	2008-06-22 16:48:36.130820328 +0200
@@ -22,7 +22,7 @@
 
 import errno
 import sys, os, tempfile, time, traceback, re, httplib
-import signal, thread
+import thread
 try:
     import gtk.glade
 except RuntimeError, e:
@@ -74,6 +74,7 @@ import monitor
 from smburi import SMBURI
 import errordialogs
 from errordialogs import *
+import debutils
 
 domain='system-config-printer'
 import locale
@@ -4691,8 +4692,7 @@ class NewPrinterGUI(GtkGUI):
         (pkgs, exes) = cupshelpers.missingPackagesAndExecutables (ppd)
         if len (pkgs) > 0 or len (exes) > 0:
             # We didn't find a necessary executable.  Complain.
-            install = "/usr/bin/system-install-packages"
-            if len (pkgs) > 0 and os.access (install, os.X_OK):
+            if len (pkgs) > 0 and debutils.can_install_packages():
                 pkg = pkgs[0]
                 install_text = ('<span weight="bold" size="larger">' +
                                 _('Install driver') + '</span>\n\n' +
@@ -4705,21 +4705,7 @@ class NewPrinterGUI(GtkGUI):
                 response = dialog.run ()
                 dialog.hide ()
                 if response == gtk.RESPONSE_OK:
-                    # Install the package.
-                    def wait_child (sig, stack):
-                        (pid, status) = os.wait ()
-
-                    signal.signal (signal.SIGCHLD, wait_child)
-                    pid = os.fork ()
-                    if pid == 0:
-                        # Child.
-                        try:
-                            os.execv (install, [install, pkg])
-                        except:
-                            pass
-                        sys.exit (1)
-                    elif pid == -1:
-                        pass # should handle error
+                    debutils.install_packages (pkgs)
             else:
                 show_error_dialog (_('Missing driver'),
                                    _("Printer '%s' requires the '%s' program "
